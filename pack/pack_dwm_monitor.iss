; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "ProcessGuard"
#define MyAppVersion "1.5"
#define MyAppPublisher "ISVision(Hangzhou) Technology Co., Ltd"
#define MyAppURL "https://www.isv-tech.com/"
#define MyAppBuildTime GetDateTimeString('yyyymmdd', '', '')

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{B1DC994A-A51B-4EB8-BF80-759BD78EB736}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
;AppPublisherURL={#MyAppURL}
;AppSupportURL={#MyAppURL}
;AppUpdatesURL={#MyAppURL}
;CreateAppDir=no
DefaultDirName={autopf}\{#MyAppName}
UninstallDisplayIcon={app}\MyProg.exe
DefaultGroupName={#MyAppName}
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputBaseFilename=ProcessMonitorSetup_{#MyAppBuildTime}
Compression=lzma
SolidCompression=yes
WizardStyle=modern
OutputDir=.
PrivilegesRequired=admin
[files]
Source: "process_guard.exe"; DestDir: "{app}"
Source: "start_service.bat"; DestDir: "{app}"
Source: "stop_service.bat"; DestDir: "{app}"
[Code]
function InitializeSetup(): Boolean;
var
  ResultCode: Integer;
  UserChoice: Integer;
begin
  Result := True;
  if not FileExists(ExpandConstant('{sys}\sc.exe')) then
  begin
    MsgBox('This installer requires the Windows Service Control Manager, which was not found on your system. Please ensure you are running a supported version of Windows.', mbError, MB_OK);
    Result := False;
    Exit;
  end;
  // �������Ƿ��Ѱ�װ��ͨ���������Ƿ���ڣ�
  if Exec(ExpandConstant('{sys}\sc.exe'), 'query ProcessMonitorService', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) and (ResultCode = 0) then
  begin
    // �Ѱ�װ����ʾ�û�ѡ��
    UserChoice := MsgBox('Process Monitor is already installed. Do you want to uninstall the existing version first?', mbConfirmation, MB_YESNO);
    if UserChoice = IDYES then
    begin
      // �û�ѡ��ж�أ�����ֹͣ���еķ���
      Exec(ExpandConstant('{sys}\sc.exe'), 'stop ProcessMonitorService', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);

      // �ȴ�������ȫֹͣ
      Sleep(2000);

      // ����ɾ�����еķ���
      Exec(ExpandConstant('{sys}\sc.exe'), 'delete ProcessMonitorService', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);

      // �ٴεȴ���ȷ��������ȫɾ��
      Sleep(1000);
    end
    else
    begin
      // �û�ѡ��ж�أ�ȡ����װ
      Result := False;
    end;
  end;

end;
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  ResultCode: Integer;
begin
  if CurUninstallStep = usUninstall then
  begin
    // ֹͣ����
    Exec(ExpandConstant('{sys}\sc.exe'), 'stop ProcessMonitorService', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    
    // ������һЩʱ������ȫֹͣ
    Sleep(2000);
    
    // ɾ������
    Exec(ExpandConstant('{sys}\sc.exe'), 'delete ProcessMonitorService', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    
    // �ٴεȴ���ȷ��������ȫɾ��
    Sleep(1000);
  end;
end;


[Run]
Filename: {sys}\sc.exe; Parameters: "create ProcessMonitorService binPath= ""{app}\process_guard.exe"" start= auto"; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "description ProcessMonitorService ""Monitors and restarts processes if memory usage exceeds threshold"""; Flags: runhidden
Filename: {sys}\sc.exe; Parameters: "start ProcessMonitorService"; Flags: runhidden
[UninstallDelete]
Type: files; Name: "{app}\process_guard.exe"
Type: files; Name: "{app}\start_service.bat"
Type: files; Name: "{app}\stop_service.bat"
[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "chinesesimplified"; MessagesFile: "compiler:Languages\ChineseSimplified.isl"

